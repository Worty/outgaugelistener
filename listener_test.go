package outgaugelistener

import (
	"fmt"
	"net"
	"testing"
	"time"
)

var testData = [][]byte{
	{
		0x00, 0x00, 0x00, 0x00, 0x62, 0x65, 0x61, 0x6d,
		0x00, 0xc0, 0x01, 0x00, 0x80, 0x07, 0x9a, 0x38,
		0x28, 0xfa, 0x33, 0x44, 0x00, 0x00, 0x00, 0x00,
		0x00, 0xa9, 0xa1, 0x42, 0x4a, 0xe8, 0x7f, 0x3f,
		0x00, 0x00, 0x00, 0x00, 0x3a, 0xde, 0xa5, 0x42,
		0x66, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	{
		0x00, 0x00, 0x00, 0x00, 0x62, 0x65, 0x61, 0x6d,
		0x00, 0xc0, 0x01, 0x00, 0x88, 0xe3, 0x8a, 0x38,
		0x6f, 0x6d, 0x33, 0x44, 0x00, 0x00, 0x00, 0x00,
		0x17, 0xa9, 0xa1, 0x42, 0x48, 0xe8, 0x7f, 0x3f,
		0x00, 0x00, 0x00, 0x00, 0x71, 0xde, 0xa5, 0x42,
		0x66, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	{
		0x00, 0x00, 0x00, 0x00, 0x62, 0x65, 0x61, 0x6d,
		0x00, 0xc0, 0x01, 0x00, 0x87, 0xb8, 0xa0, 0x38,
		0xc5, 0xea, 0x32, 0x44, 0x00, 0x00, 0x00, 0x00,
		0x2e, 0xa9, 0xa1, 0x42, 0x47, 0xe8, 0x7f, 0x3f,
		0x00, 0x00, 0x00, 0x00, 0xab, 0xde, 0xa5, 0x42,
		0x66, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	{
		0x00, 0x00, 0x00, 0x00, 0x62, 0x65, 0x61, 0x6d,
		0x00, 0xc0, 0x01, 0x00, 0xca, 0xf3, 0x99, 0x38,
		0x02, 0x66, 0x32, 0x44, 0x00, 0x00, 0x00, 0x00,
		0x47, 0xa9, 0xa1, 0x42, 0x45, 0xe8, 0x7f, 0x3f,
		0x00, 0x00, 0x00, 0x00, 0xcd, 0xde, 0xa5, 0x42,
		0x66, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	{
		0x00, 0x00, 0x00, 0x00, 0x62, 0x65, 0x61, 0x6d,
		0x00, 0xc0, 0x01, 0x00, 0x75, 0xd0, 0x8f, 0x38,
		0xe0, 0xe4, 0x31, 0x44, 0x00, 0x00, 0x00, 0x00,
		0x5e, 0xa9, 0xa1, 0x42, 0x44, 0xe8, 0x7f, 0x3f,
		0x00, 0x00, 0x00, 0x00, 0xf6, 0xde, 0xa5, 0x42,
		0x66, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	{
		0x00, 0x00, 0x00, 0x00, 0x62, 0x65, 0x61, 0x6d,
		0x00, 0xc0, 0x01, 0x00, 0xce, 0x72, 0xbc, 0x38,
		0x2d, 0x39, 0x32, 0x44, 0x00, 0x00, 0x00, 0x00,
		0x75, 0xa9, 0xa1, 0x42, 0x43, 0xe8, 0x7f, 0x3f,
		0x00, 0x00, 0x00, 0x00, 0x0f, 0xdf, 0xa5, 0x42,
		0x66, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
}

var malformedPacket = []byte{0x00}

func TestParseData(t *testing.T) {
	for _, v := range testData {
		d, err := parseData(v)
		if err != nil {
			t.Fatal(err)
		}
		fmt.Printf("%+v\n", d)
	}

	_, err := parseData(malformedPacket)
	if err == nil {
		t.Fatal("expected error")
	}

}

func TestReceiver(t *testing.T) {
	l, err := NewListener(&net.UDPAddr{IP: net.ParseIP("127.0.0.1"), Port: 4444})
	if err != nil {
		t.Fatal(err)
	}
	ch := l.GetChannel()

	send, err := net.Dial("udp", "127.0.0.1:4444")
	if err != nil {
		t.Fatal(err)
	}
	defer send.Close()
	numOfSendPackets := len(testData)
	numOfRecvPackets := 0
	go func() {
		for _, v := range testData {
			send.Write(v)
		}
		time.Sleep(1 * time.Millisecond)
		l.Close()
	}()
	for range ch {
		numOfRecvPackets++
	}
	if numOfRecvPackets != numOfSendPackets {
		t.Fatalf("expected %d packets, got %d", numOfSendPackets, numOfRecvPackets)
	}

}

var result *OutGaugeData

func BenchmarkParseData(b *testing.B) {
	for n := 0; n < b.N; n++ {
		result, _ = parseData(testData[0])
	}
}

func BenchmarkReceiver(b *testing.B) {
	l, err := NewListener(&net.UDPAddr{IP: net.ParseIP("127.0.0.1"), Port: 4444})
	if err != nil {
		b.Fatal(err)
	}
	defer l.Close()
	ch := l.GetChannel()

	send, err := net.Dial("udp", "127.0.0.1:4444")
	if err != nil {
		b.Fatal(err)
	}
	defer send.Close()

	for n := 0; n < b.N; n++ {
		send.Write(testData[0])
		<-ch
	}
}
